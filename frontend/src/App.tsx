import React, { useState, useEffect } from 'react';
import './App.css';

const BACKEND_URL = 'https://gh-loyalty-bot.onrender.com';

function App() {
  const [messages, setMessages] = useState<Array<{text: string, isUser: boolean}>>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [questionCount, setQuestionCount] = useState(0);
  const [landingShown, setLandingShown] = useState(false);
  const [creditsShown, setCreditsShown] = useState(false);
  const [limitReached, setLimitReached] = useState(false);

  useEffect(() => {
    const savedCount = localStorage.getItem('questionCount');
    const savedLanding = localStorage.getItem('landingShown');
    const savedCredits = localStorage.getItem('creditsShown');
    const savedLimit = localStorage.getItem('limitReached');
    
    if (savedCount) setQuestionCount(parseInt(savedCount));
    if (savedLanding === 'true') setLandingShown(true);
    if (savedCredits === 'true') setCreditsShown(true);
    if (savedLimit === 'true') setLimitReached(true);
  }, []);

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = inputMessage.trim();
    setInputMessage('');
    setIsLoading(true);

    // Add user message
    const newMessages = [...messages, { text: userMessage, isUser: true }];
    setMessages(newMessages);

    try {
      const response = await fetch(`${BACKEND_URL}/api/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: userMessage,
          promptcount: questionCount + 1
        }),
      });

      const data = await response.json();
      
      // Add AI response
      setMessages([...newMessages, { text: data.reply, isUser: false }]);
      
      // Update question count
      const newCount = questionCount + 1;
      setQuestionCount(newCount);
      localStorage.setItem('questionCount', newCount.toString());
      
      // Check limit - show credits page after 5 questions
      if (newCount >= 5 && !creditsShown) {
        setCreditsShown(true);
        localStorage.setItem('creditsShown', 'true');
      }
      
    } catch (error) {
      console.error('Error:', error);
      setMessages([...newMessages, { text: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', isUser: false }]);
    }

    setIsLoading(false);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const startChat = () => {
    setLandingShown(true);
    localStorage.setItem('landingShown', 'true');
  };

  const continueWithPayment = () => {
    setCreditsShown(false);
    setLimitReached(true);
    localStorage.setItem('creditsShown', 'false');
    localStorage.setItem('limitReached', 'true');
  };

  const resetApp = () => {
    setMessages([]);
    setQuestionCount(0);
    setLandingShown(false);
    setCreditsShown(false);
    setLimitReached(false);
    localStorage.clear();
  };

  // Landing Page
  if (!landingShown) {
    return (
      <div className="landing-container">
        <div className="landing-content">
          <div className="landing-graphic">
            <img src="/img/calendar.png" alt="Calendar" className="main-calendar" />
          </div>
          
          <h1 className="landing-title">
            –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤–∞—à–µ–π –≤—ã–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
          </h1>
          
          <p className="landing-description">
            –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ —É–∑–Ω–∞–≤–∞—Ç—å, –≥–¥–µ –≤—ã–≥–æ–¥–Ω–µ–µ –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏: —Å–æ–æ–±—â–∏–º –≤–∞–º –∫–∞–∫ –æ —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞—Ö, —Ç–∞–∫ –∏ –æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∞–∫—Ü–∏—è—Ö. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–¥–Ω—É –Ω–µ–¥–µ–ª—é: –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω –≤—ã–≥–æ–¥–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∞–∫—Ü–∏—è—Ö. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.
          </p>
          
          <div className="features-list">
            <div className="feature-item">
              <div className="feature-icon">
                <img src="/img/clock.svg" alt="Clock" className="feature-icon-img" />
              </div>
              <span className="feature-text">–ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ—Å–µ–π–ª–∞—Ö –∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞—Ö —Å —Å—É–ø–µ—Ä-–∫—ç—à–±—ç–∫–æ–º</span>
            </div>
            
            <div className="feature-item">
              <div className="feature-icon">
                <img src="/img/percent.svg" alt="Percent" className="feature-icon-img" />
              </div>
              <span className="feature-text">–£–∑–Ω–∞–≤–∞–π—Ç–µ, –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞—é—Ç –º–∞–∫—Å–∏–º—É–º –≤—ã–≥–æ–¥—ã –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å</span>
            </div>
            
            <div className="feature-item">
              <div className="feature-icon">
                <img src="/img/rub-flag.svg" alt="Rub Flag" className="feature-icon-img" />
              </div>
              <span className="feature-text">–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ —Å –∫—ç—à–±—ç–∫–æ–º –¥–æ 100% ‚Äî –æ—Ç –æ–¥–µ–∂–¥—ã –¥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π</span>
            </div>
            
            <div className="feature-item">
              <div className="feature-icon">
                <img src="/img/credit.svg" alt="Credit" className="feature-icon-img" />
              </div>
              <span className="feature-text">–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é ‚Äî –Ω–æ–≤—ã–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–≥–æ–¥–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</span>
            </div>
          </div>
          
          <button onClick={startChat} className="cta-button">
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞ 99 ‚ÇΩ
          </button>
        </div>
      </div>
    );
  }

  // Credits Page (after 5 questions)
  if (creditsShown) {
    return (
      <div className="credits-container">
        <div className="credits-content">
          <div className="credits-header">
            <div className="header-title">–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</div>
          </div>
          
          <div className="credits-graphic">
            <div className="shock-emoji">üò±</div>
          </div>
          
          <h2 className="credits-title">–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</h2>
          
          <div className="credits-description">
            <p>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ <strong>49 ‚ÇΩ</strong></p>
          </div>
          
          <button onClick={continueWithPayment} className="credits-cta-button">
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞ 49 ‚ÇΩ
          </button>
        </div>
      </div>
    );
  }

  // Limit Page (final page)
  if (limitReached) {
    return (
      <div className="credits-container">
        <div className="credits-content">
          <div className="credits-header">
            <div className="header-title">–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</div>
          </div>
          
          <div className="credits-graphic">
            <div className="shock-emoji">üò±</div>
          </div>
          
          <h2 className="credits-title">–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</h2>
          
          <div className="credits-description">
            <p>–ü—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
          </div>
          
          <button onClick={resetApp} className="credits-cta-button">
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </button>
        </div>
      </div>
    );
  }

  // Chat Page
  return (
    <div className="main-chat-layout">
      <div className="chat-window">
        {messages.length === 0 ? (
          <div className="placeholder-message">
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∂–∏–ª–∏—â–Ω–æ-–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–∞–º –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞?
          </div>
        ) : (
          messages.map((message, index) => (
            <div key={index} className={`chat-bubble ${message.isUser ? 'user' : 'ai'}`}>
              {message.text}
            </div>
          ))
        )}
        {isLoading && (
          <div className="chat-bubble ai">
            <div className="typing-indicator">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        )}
      </div>
      
      <div className="chat-input">
        <input
          type="text"
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          disabled={isLoading}
        />
        <button 
          onClick={sendMessage} 
          disabled={!inputMessage.trim() || isLoading}
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </button>
      </div>
    </div>
  );
}

export default App;